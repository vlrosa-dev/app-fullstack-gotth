// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: verification.sql

package db

import (
	"context"
	"time"
)

const createVerificationUser = `-- name: CreateVerificationUser :exec
INSERT INTO verifications (id, email, code, expires_at, type)
VALUES ($1, $2, $3, $4, $5)
`

type CreateVerificationUserParams struct {
	ID        int32
	Email     string
	Code      string
	ExpiresAt time.Time
	Type      string
}

func (q *Queries) CreateVerificationUser(ctx context.Context, arg CreateVerificationUserParams) error {
	_, err := q.db.ExecContext(ctx, createVerificationUser,
		arg.ID,
		arg.Email,
		arg.Code,
		arg.ExpiresAt,
		arg.Type,
	)
	return err
}

const deleteVerificationUser = `-- name: DeleteVerificationUser :exec
DELETE FROM verifications
WHERE email=$1
`

func (q *Queries) DeleteVerificationUser(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteVerificationUser, email)
	return err
}

const getVerificationUser = `-- name: GetVerificationUser :one
SELECT id, email, code, expires_at, type FROM verifications
WHERE email=$1
`

func (q *Queries) GetVerificationUser(ctx context.Context, email string) (Verification, error) {
	row := q.db.QueryRowContext(ctx, getVerificationUser, email)
	var i Verification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Code,
		&i.ExpiresAt,
		&i.Type,
	)
	return i, err
}
