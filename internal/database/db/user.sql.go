// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createOneUser = `-- name: CreateOneUser :exec
INSERT INTO users (id, first_name, last_name, email, password, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateOneUserParams struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateOneUser(ctx context.Context, arg CreateOneUserParams) error {
	_, err := q.db.ExecContext(ctx, createOneUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteOneUser = `-- name: DeleteOneUser :exec
DELETE FROM users
WHERE id=$1
`

func (q *Queries) DeleteOneUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteOneUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, email, created_at, updated_at FROM users
`

type GetAllUsersRow struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, password, created_at, updated_at FROM users
WHERE id=$1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOneUser = `-- name: UpdateOneUser :exec
UPDATE users SET first_name=$2, last_name=$3
WHERE id=$1
`

type UpdateOneUserParams struct {
	ID        string
	FirstName string
	LastName  string
}

func (q *Queries) UpdateOneUser(ctx context.Context, arg UpdateOneUserParams) error {
	_, err := q.db.ExecContext(ctx, updateOneUser, arg.ID, arg.FirstName, arg.LastName)
	return err
}

const userAlreadyExists = `-- name: UserAlreadyExists :one
SELECT id, first_name, last_name, email, password, created_at, updated_at FROM users
WHERE email=$1
`

func (q *Queries) UserAlreadyExists(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, userAlreadyExists, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
